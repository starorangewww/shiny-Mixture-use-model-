library(shiny)
library(rlang)
library(httpuv)
library(Rcpp)
library(rsconnect)
library(shinycssloaders)
library(varhandle)
library(ggplot2)
library(randomForest)
library(gee)
library(gmm)
library(glmnet)
library(rfUtilities)

#Function
initial_Lambda.1<-function(Time,Status,X,Z,id,corstr){
  X<-as.matrix(cbind(1,X))
  Z<-as.matrix(cbind(1,Z))
  w <- Status
  t2 <- Time
  K <- length(unique(id))
  n <- as.vector(table(id))
  Kn <- sum(n)
  cens <- Status
  t11 <- sort(Time)
  c11 <- Status[order(Time)]
  x111 <- as.matrix(X[order(Time), ])
  g11 <- w[order(Time)]
  tt1 <- unique(t11[c11 == 1])
  kk <- length(table(t11[c11 == 1]))
  dd <- as.matrix(table(t11[c11 == 1]))
  gg1 <- Status
  gg2 <- log(Time)
  gg1[gg1<1e-06] <- 1e-06
  gg3 <- log(gg1) + log(Time)
  #pmt1c <- eval(parse(text = paste("geese", "(", "w~Z[,-1]", ",id=", "id", ",family = binomial", ",corstr='", corstr, "'", ")", sep = "")))$beta
  pmt1c<-gee(w~Z[,-1],id=id,family=binomial,corstr=corstr)
  pmt1c<-pmt1c$coefficients
  #pmt1s <- eval(parse(text = paste("geese", "(", "w~X-1+", "offset(", "gg3", ")", ",id=", "id", ",family = poisson", ",corstr='", corstr, "'", ")", sep = "")))$beta
  pmt1s<-gee(w~X[,-1],as.data.frame(offset(gg3)),id=id,family=poisson,corstr=corstr)
  pmt1s<-pmt1s$coefficients
  ppmt2<-c(pmt1c, pmt1s)
  KK<-1
  repeat{
    gSSS1 <- rep(0, kk)
    KK1 <- 1
    repeat{
      gSS<-rep(0, kk)
      gSS1<-rep(1, kk)            
      gSS[1]<-dd[1]/(sum(g11[min((1:(Kn))[t11 == tt1[1]]):(Kn)]*exp(matrix(x111[min((1:(Kn))[t11 == tt1[1]]):(Kn),],ncol=dim(X)[2])%*%matrix(pmt1s,ncol=1))))
      for (i in 1:(kk-1)){
        
        gSS[i+1]<-gSS[i]+dd[i+1]/(sum(g11[min((1:(Kn))[t11==tt1[i+1]]):(Kn)]*exp(matrix(x111[min((1:(Kn))[t11==tt1[i+1]]):(Kn),],ncol=dim(X)[2])%*%matrix(pmt1s,ncol=1))))
      }
      gSS1<-exp(-gSS)
      gSS2<-rep(0, Kn)
      gSS3<-rep(0, Kn)
      for(i in 1:Kn){
        kk1<-1
        if(t2[i]<tt1[1]){
          gSS2[i]<-1
          gSS3[i]<-1e-08
        }else{
          if(t2[i]>=tt1[kk]) {
            gSS2[i]<-0
            gSS3[i]<-gSS[kk]
          }else{
            repeat{
              if(t2[i]>=tt1[kk1]) 
                kk1<-kk1+1 else break}
            {gSS2[i]<-(gSS1[kk1-1])^(exp(X[i,]%*%matrix(pmt1s,ncol=1)))
              gSS3[i]<-gSS[kk1 - 1]
            }
          }
        }
      }
      gg2<-log(gSS3)
      gg3<-log(gg1)+gg2
      #ww2 <- eval(parse(text = paste("geese", "(", "w~X-1+", "offset(", "gg3", ")", ",id=", "id", ",family = poisson", ",corstr='", corstr, "'", ")", sep = "")))
      ww2<-gee(w~X[,-1],as.data.frame(offset(gg3)),id=id,family=poisson,corstr=corstr)
      
      if(KK1<100&&(any(abs(ww2$beta-pmt1s)>1e-06)||any(abs(gSS1-gSSS1)>1e-06))){
        pmt1s<-c(ww2$coefficients)
        gSSS1<-gSS1
        KK1 <- KK1 + 1
      } else {
        gg1<-Status+((1-Status)*exp(Z%*%matrix(pmt1c,ncol=1))*gSS2)/(1+exp(Z%*%matrix(pmt1c,ncol=1))*gSS2)
        g11<-gg1[order(t2)]
        gg1[gg1<1e-06]<-1e-06
        gg3<-log(gg1)+gg2
        break
      }}
    pmt2c<-gee(w~Z[,-1],id=id,family=binomial,corstr=corstr)
    pmt2c<-pmt2c$coefficients
    
    pmt2s<-gee(w~X[,-1],as.data.frame(offset(gg3)),id=id,family=poisson,corstr=corstr)
    pmt2s<-pmt2s$coefficients
    
    if (any(abs(pmt2c-pmt1c)>1e-03)||max((pmt2s - pmt1s)^2)>1e-03){
      pmt1c<-pmt2c
      pmt1s <- pmt2s
      KK<-KK+1
    } else break
  }
  Lambda<-gSS3
  list(Lambda = Lambda,beta.00=pmt1s)
}

moments.g.1<-function(theta,data){
  y<-matrix(data[,3],ncol=1)
  Q<-data.matrix(data[,-c(1:3)])
  theta.1<-matrix(theta,ncol=1)
  Q<-cbind(1,Q)
  mu<-exp(Q%*%theta.1)
  G<-c(y-(mu/(1+mu)))*Q
  return(G)
}


#AIC
LL.aic.logis<-function(beta,gamma,alpha.01,data){
  #probability
  gamma.1<-matrix(gamma,ncol=1)
  beta.1<-matrix(beta,ncol=1)
  Y.1<-data[,1]
  Delta.1<-data[,2]
  alpha.1<-alpha.01
  X.1<-cbind(1,data[,-c(1:3)])
  Z.1<-cbind(1,data[,-c(1:3)])
  X.1<-as.matrix(X.1)
  Z.1<-as.matrix(Z.1)
  P1<-exp(Z.1%*%gamma.1)/(1+exp(Z.1%*%gamma.1))
  #log-likelihood
  L.sum<-sum(log((P1*(((alpha.1*(Y.1^(alpha.1-1))*exp(X.1%*%beta.1)))^Delta.1)*exp(-exp(X.1%*%beta.1)*(Y.1^alpha.1)))+
                   (1-P1))) 
  return(list(LL=L.sum))
}
LL.aic.rf<-function(beta,Pi.0,alpha.01,data){
  #probability
  beta.1<-matrix(beta,ncol=1)
  Y.1<-data[,1]
  Delta.1<-data[,2]
  alpha.1<-alpha.01
  X.1<-cbind(1,data[,-c(1:3)])
  X.1<-as.matrix(X.1)
  P1<-Pi.0
  #log-likelihood
  L.sum<-sum(log((P1*(((alpha.1*(Y.1^(alpha.1-1))*exp(X.1%*%beta.1)))^Delta.1)*exp(-exp(X.1%*%beta.1)*(Y.1^alpha.1)))+
                   (1-P1))) 
  return(list(LL=L.sum))
}

#
ui<-fluidPage(
  h3("Estimate the willingness and lifetime for customers' using online banking"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file",label="Input your dataset"),
      h4(a("Demo dataset.", href = "https://drive.google.com/file/d/1X7m6yEj0BjZlfIzKfS5ecv6Mvw7_BUF_/view?usp=sharing")),
      selectInput("Model.select","Choose the model type for the willingness preference",list("logistic","Debiased LASSO",
                                                                                             "Random Forest")),
      h4("Selecting the column for lifetime and status"),
      fluidRow(column(5,textInput("col.surv","column for liftetime",value =1))
               ,column(5,textInput("col.status","column for status",value =2))),
      h4("Selecting the bootstrapping sample size for estimated variance of estimators"),
      fluidRow(column(5,textInput("BS","bootstrapping sample size",value =100))),
      h4("Selecting the converge range and iterating time"),
      fluidRow(column(5,textInput("eps","converge range",value =0.01)),column(5,textInput("inter.num","iterating time",value =30))),
      #Run
      br(),
      actionButton("goButton","Run"),
      br(),
      h4("Download Table"),
      downloadButton("downloadData.1", "Download the preference table")
    ),
    mainPanel(h3("Summary"),
              withSpinner(tableOutput("Result1")),
              h3("AIC"),
              withSpinner(textOutput("XY")),
              h3("The predicted preference of the mixture use model"),
              dataTableOutput("result2"))
  )
)

server <- function(input, output){
  
  datasetInputRaw<-reactive({
    input$goButton
    inFile<-isolate(input$file)
    validate(need(inFile!= "", "Please input your dataset"))
    if(is.null(inFile)){return("No Data")}else{
      data1<-read.csv(inFile$datapath,header = T)
    }
    return(list(Data1=data1))
  })
  #Analysis
  analysis.result<-reactive({
    data.ob.demo<-datasetInputRaw()[[1]]
    #data.ob.demo<-read.csv(file.choose())
    data.ob.demo.ID<-data.ob.demo[,1]
    data.ob.demo<-data.ob.demo[,-1]
    #Inputvalue
    model.select<-isolate(input$Model.select);Col.surv<-isolate(as.numeric(input$col.surv))
    col.status<-isolate(as.numeric(input$col.status));BS<-isolate(as.numeric(input$BS))
    Eps<-isolate(as.numeric(input$eps));Inter.num<-isolate(as.numeric(input$inter.num))
    #
    data.ob.demo1<-cbind(data.ob.demo[,c(Col.surv:col.status)],data.ob.demo[,col.status])
    #
    names(data.ob.demo1)<-c("Surv.time","status","cured")
    data.ob.demo2<-data.ob.demo[,-c(Col.surv:col.status)]
    Variable<-names(data.ob.demo2)
    data.ob.1.1<-cbind(data.ob.demo1,data.ob.demo2)
    data.ob.1<-data.ob.1.1
    #Model
    if(model.select=="logistic"){
      #==========================================
      #
      moments.G1<-function(theta,data){
        alpha.u1<-alpha.01
        y<-matrix(data[,1],ncol=1)
        x<-data.matrix(data[,-c(1:3)])
        Wi<-matrix(data[,3],ncol=1)
        theta.1<-matrix(theta,ncol=1)
        status<-data[,2]
        G<-matrix(0,ncol=1,nrow=dim(data)[1])
        q.1<-cbind(1,x)
        mu<-q.1%*%theta.1
        G<-c(status-(exp(mu)*(y)^(alpha.u1)))
        G.1<-c(Wi)*c(G)
        G.2<-c(G.1)*q.1
        return(G.2)
      }
      moments.alpha<-function(theta,data){
        y<-matrix(data[,1],ncol=1)
        x<-data.matrix(data[,-c(1:3)])
        Wi<-matrix(data[,3],ncol=1)
        theta.1<-matrix(theta,ncol=1)
        status<-data[,2]
        q.1<-cbind(1,x)
        G.A<-(log(y)*(Wi*status-Wi*(y^(theta))*exp(q.1%*%Beta.b))+status/theta)
        return(G.A)
      }
      #======================================
      #estimation
      #Initial value
      Lambda.1<-initial_Lambda.1(Time=data.ob.1$Surv.time,Status=data.ob.1$status,
                                 id=c(1:dim(data.ob.1)[1]),
                                 X=data.ob.1[,-(1:3)],Z=data.ob.1[,-(1:3)],
                                 corstr="independence")
      Lambda1<-Lambda.1$Lambda
      alpha.01<-c(-sum(data.ob.1$status)/sum(data.ob.1$status*log(data.ob.1$Surv.time)*(data.ob.1$status-Lambda1)))
      
      my_gmm.2<-gmm(moments.G1,x=data.ob.1,t0=rep(0,dim(data.ob.1[,-c((1:3))])[2]+1),type="iterative",
                    method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
      beta.00<-my_gmm.2$coefficients
      logit_model<-glm(factor(cured)~.,data = data.ob.1[,-c(1:2)],family=binomial(link = "logit"))
      gamma.00<-coef(logit_model)
      #iterating
      K.1<-0
      para.test.0<-c(beta.00,gamma.00,alpha.01)
      while(1){
        gamma.1<-matrix(gamma.00,ncol=1)
        beta.1<-matrix(beta.00,ncol=1)
        X.t.1<-cbind(1,data.ob.1[,-c((1:3))])
        Z.t.1<-cbind(1,data.ob.1[,-(1:3)])
        X.t.1<-as.matrix(X.t.1)
        Z.t.1<-as.matrix(Z.t.1)
        S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.1$Surv.time^alpha.01))
        pi<-exp(Z.t.1%*%gamma.1)
        Wi<-data.ob.1$status+((1-data.ob.1$status)*pi*(S3)/(((1)*(1))+(pi*S3)))
        data.ob.1$cured<-Wi
        #
        my_gmm.t1<-gmm(moments.g.1,x=data.ob.1,t0=gamma.00,type="iterative",wmatrix = "optimal",
                       method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
        (gamma.01<-my_gmm.t1$coefficients)
        #
        my_gmm.t2<-gmm(moments.G1,x=data.ob.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                       method = "Nelder-Mead", control = list(reltol = 1e-25,maxit=20000))
        
        (beta.01<-my_gmm.t2$coefficients)
        Beta.b<-matrix(beta.01,ncol=1)
        my_gmm.t3<-gmm(moments.alpha,x=data.ob.1,t0=c(alpha.01),optfct=c("nlminb"))
        (alpha.S1<-my_gmm.t3$coefficients)
        para.test<-c(beta.01,gamma.01,alpha.S1)
        ###
        if((max(abs((para.test)-(para.test.0)))<Eps)|K.1>Inter.num)
          break
        #LL.0<-LL.s
        gamma.00<-gamma.01
        beta.00<-beta.01
        alpha.01<-alpha.S1
        K.1<-K.1+1
        para.test.0<-para.test
        print(para.test)
      }
      gamma.t.01<-gamma.01
      beta.t.01<-beta.01
      alpha.t.S1<-alpha.S1
      Estimation.para<-c(gamma.t.01,beta.t.01,alpha.t.S1)
      Q1<-data.matrix(data.ob.1.1[,-c(1:3)])
      theta.11<-matrix(gamma.t.01,ncol=1)
      Q1<-cbind(1,Q1)
      mu<-exp(Q1%*%theta.11)
      Prob.y<-mu/(1+mu)
      #AIC
      AIC<-2*(length(beta.t.01)+length(gamma.t.01)+length(alpha.t.S1))-2*(LL.aic.logis(beta.t.01,gamma.t.01,alpha.t.S1,data.ob.1)$LL)
      #SAIC<-2*(length(beta.t.01)+length(gamma.t.01)+length(alpha.t.S1))-2*(LL.aic.logis(beta.t.01,gamma.t.01,alpha.t.S1,data.ob.1)$LL)+sum(Prob.y*log(Prob.y))
        
      #========================
      #bootstrapping
      beta.est.1.v<-c();gamma.est.1.v<-c()
      alpha.est.1.v<-c()
      for(boot in 1:BS){
        set.seed(boot)
        tryCatch({
          N.boot.a<-sample(1:(dim(data.ob.1.1)[1]),replace=T)
          data.ob.2<-data.ob.1.1[N.boot.a,]
          data.ob.2.1<-data.ob.2
          Lambda.1<-initial_Lambda.1(Time=data.ob.2.1$Surv.time,Status=data.ob.2.1$status,
                                     id=c(1:dim(data.ob.2.1)[1]),
                                     X=data.ob.2.1[,-c((1:3))],Z=data.ob.2.1[,-(1:3)],
                                     corstr="independence")
          Lambda1<-Lambda.1$Lambda
          alpha.01<-c(-sum(data.ob.2.1$status)/sum(data.ob.2.1$status*log(data.ob.2.1$Surv.time)*(data.ob.2.1$status-Lambda1)))
          #
          logit_model<-glm(factor(cured)~.,data = data.ob.2.1[,-c(1:2)],family=binomial(link = "logit"))
          gamma.00<-coef(logit_model)
          my_gmm.2<-gmm(moments.G1,x=data.ob.2.1,t0=rep(0,dim(data.ob.2.1[,-c((1:3))])[2]+1),type="iterative",
                        method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
          (beta.00<-my_gmm.2$coefficients)
          #
          K.1<-0
          para.test.0<-c(beta.00,gamma.00,alpha.01)
          while(1){
            gamma.1<-matrix(gamma.00,ncol=1)
            beta.1<-matrix(beta.00,ncol=1)
            X.t.1<-cbind(1,data.ob.2.1[,-c((1:3))])
            Z.t.1<-cbind(1,data.ob.2.1[,-(1:3)])
            X.t.1<-as.matrix(X.t.1)
            Z.t.1<-as.matrix(Z.t.1)
            S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.2.1$Surv.time^alpha.01))
            pi<-exp(Z.t.1%*%gamma.1)
            Wi<-data.ob.2.1$status+((1-data.ob.2.1$status)*pi*(S3)/(((1)*(1))+(pi*S3)))
            data.ob.2.1$cured<-Wi
            #
            my_gmm.t1<-gmm(moments.g.1,x=data.ob.2.1,t0=gamma.00,type="iterative",wmatrix = "optimal",
                           method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
            (gamma.01<-my_gmm.t1$coefficients)
            #
            my_gmm.t2<-gmm(moments.G1,x=data.ob.2.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                           method = "Nelder-Mead", control = list(reltol = 1e-25,maxit=20000))
            beta.01<-my_gmm.t2$coefficients
            Beta.b<-matrix(beta.01,ncol=1)
            my_gmm.t3<-gmm(moments.alpha,x=data.ob.2.1,t0=c(alpha.01),optfct=c("nlminb"))
            alpha.S1<-my_gmm.t3$coefficients
            para.test<-c(beta.01,gamma.01,alpha.S1)
            ###
            if((max(abs((para.test)-(para.test.0)))<Eps)|K.1>Inter.num)
              break
            #LL.0<-LL.s
            gamma.00<-gamma.01
            beta.00<-beta.01
            alpha.01<-alpha.S1
            K.1<-K.1+1
            para.test.0<-para.test
            print(para.test)
            
          }
        },warning=function(w){},error=function(e){})
        
        gamma.est.1.v<-rbind(gamma.est.1.v,gamma.01)
        beta.est.1.v<-rbind(beta.est.1.v,beta.01)
        alpha.est.1.v<-c(alpha.est.1.v,alpha.S1)
      }
      #
      gamma.est.V<-sqrt(apply(gamma.est.1.v,2,var))
      beta.est.V<-sqrt(apply(beta.est.1.v,2,var))
      alpha.es.V<-sqrt(var(alpha.est.1.v))
      Standard.Error.para<-c(gamma.est.V,beta.est.V,alpha.es.V)
      Z.score=Estimation.para/Standard.Error.para
      P.value<-2*(1-pnorm(abs(Z.score)))
      CI.l<-Estimation.para+qnorm(0.025)*Standard.Error.para
      CI.u<-Estimation.para+qnorm(0.975)*Standard.Error.para
      CI<-paste0("(",round(CI.l,3),",",round(CI.u,3),")")
      #
      G.para<-paste0(Variable,paste0(".gamma",c(0:length(gamma.est.V))))
      B.para<-paste0(Variable,paste0(".beta",c(0:length(beta.est.V))))
      a.para<-c("alpha")
      para.name<-c(G.para,B.para,a.para)
      #
      result.R<-cbind(para.name,round(Estimation.para,3),round(Standard.Error.para,3),round(Z.score,3),round(P.value,3),CI)
      colnames(result.R)<-c("Covariates","Estimation","S.E","Z","P value","C.I. of 95%")
      #plot
      result.plot<-cbind(data.ob.demo.ID,data.ob.1.1[,-c(1:3)],round(Prob.y,3))
      
    }else{
      if(model.select=="Debiased LASSO"){
        #==========================================
        #
        moments.G1<-function(theta,data){
          alpha.u1<-alpha.01
          y<-matrix(data[,1],ncol=1)
          x<-data.matrix(data[,-c(1:3)])
          Wi<-matrix(data[,3],ncol=1)
          theta.1<-matrix(theta,ncol=1)
          status<-data[,2]
          G<-matrix(0,ncol=1,nrow=dim(data)[1])
          q.1<-cbind(1,x)
          mu<-q.1%*%theta.1
          G<-c(status-(exp(mu)*(y)^(alpha.u1)))
          G.1<-c(Wi)*c(G)
          G.2<-c(G.1)*q.1
          return(G.2)
        }
        moments.alpha<-function(theta,data){
          y<-matrix(data[,1],ncol=1)
          x<-data.matrix(data[,-c(1:3)])
          Wi<-matrix(data[,3],ncol=1)
          theta.1<-matrix(theta,ncol=1)
          status<-data[,2]
          q.1<-cbind(1,x)
          G.A<-(log(y)*(Wi*status-Wi*(y^(theta))*exp(q.1%*%Beta.b))+status/theta)
          return(G.A)
        }
        Lambda.1<-initial_Lambda.1(Time=data.ob.1$Surv.time,Status=data.ob.1$status,
                                   id=c(1:dim(data.ob.1)[1]),
                                   X=data.ob.1[,-(1:3)],Z=data.ob.1[,-(1:3)],
                                   corstr="independence")
        Lambda1<-Lambda.1$Lambda
        alpha.01<-c(-sum(data.ob.1$status)/sum(data.ob.1$status*log(data.ob.1$Surv.time)*(data.ob.1$status-Lambda1)))
        
        my_gmm.2<-gmm(moments.G1,x=data.ob.1,t0=rep(0,dim(data.ob.1[,-c((1:3))])[2]+1),type="iterative",
                      method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
        beta.00<-my_gmm.2$coefficients
        #======================================
        #Initial gamma
        U.logit.1<-data.ob.1$cured
        lambda.m<-cv.glmnet(data.matrix(data.ob.1[,-c(1:3)]),U.logit.1,family=binomial,standardize = FALSE)
        (gamma.00<-coef(lambda.m,s=lambda.m$lambda.min)[1:(dim(data.ob.1[,-c(1:3)])[2]+1)])
        defult.lambda<-lambda.m$lambda.min
        #bebias
        Z.t.1<-data.matrix(cbind(1,data.ob.1[,-c(1:3)]))
        gamma.tt<-matrix(gamma.00,ncol=1)
        #first derivating
        pi<-exp(Z.t.1%*%gamma.tt)/(1+exp(Z.t.1%*%gamma.tt))
        pi.first<-sapply(1:(dim(Z.t.1)[1]),function(i){Z.t.1[i,]*(data.ob.1$cured[i]-pi[i])})
        pi.first.1<-matrix(apply(pi.first,1,sum),ncol=1)
        #second derivating
        pi.sec<-0
        for(i in 1:dim(Z.t.1)[1]){
          pi.sec.t<-(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
          pi.sec<-pi.sec+pi.sec.t}
        pi.sec.1<-(-pi.sec)/(dim(Z.t.1)[1])
        pi.sec.1.inv<-solve(pi.sec.1)
        gamma.1.debias<-gamma.tt-(pi.sec.1.inv%*%(pi.first.1))/(dim(Z.t.1)[1])
        gamma.00<-c(gamma.1.debias)
        #iterating
        K.1<-0
        para.test.0<-c(beta.00,gamma.00,alpha.01)
        while(1){
          gamma.1<-matrix(gamma.00,ncol=1)
          beta.1<-matrix(beta.00,ncol=1)
          X.t.1<-cbind(1,data.ob.1[,-c((1:3))])
          Z.t.1<-cbind(1,data.ob.1[,-(1:3)])
          X.t.1<-as.matrix(X.t.1)
          Z.t.1<-as.matrix(Z.t.1)
          S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.1$Surv.time^alpha.01))
          pi<-exp(Z.t.1%*%gamma.1)
          Wi<-data.ob.1$status+((1-data.ob.1$status)*pi*(S3)/(((1)*(1))+(pi*S3)))
          data.ob.1$cured<-Wi
          #
          model.lasso<-glmnet(data.matrix(data.ob.1[,-c(1:3)]),Wi,family=binomial,standardize = FALSE,lambda=defult.lambda)
          gamma.01<-coef(model.lasso)[1:(dim(data.ob.1[,-c(1:3)])[2]+1)]
          
          #bebias
          Z.t.1<-data.matrix(cbind(1,data.ob.1[,-c(1:3)]))
          gamma.tt<-matrix(gamma.01,ncol=1)
          #first derivating
          pi<-exp(Z.t.1%*%gamma.tt)/(1+exp(Z.t.1%*%gamma.tt))
          pi.first<-sapply(1:(dim(Z.t.1)[1]),function(i){Z.t.1[i,]*(data.ob.1$cured[i]-pi[i])})
          pi.first.1<-matrix(apply(pi.first,1,sum),ncol=1)
          #second derivating
          pi.sec<-0
          for(i in 1:dim(Z.t.1)[1]){
            pi.sec.t<-(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
            pi.sec<-pi.sec+pi.sec.t}
          pi.sec.1<-(-pi.sec)/(dim(Z.t.1)[1])
          pi.sec.1.inv<-solve(pi.sec.1)
          gamma.1.debias<-gamma.tt-(pi.sec.1.inv%*%(pi.first.1))/(dim(Z.t.1)[1])
          gamma.01<-c(gamma.1.debias)
          
          #Cox
          my_gmm.t2<-gmm(moments.G1,x=data.ob.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                         method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
          
          (beta.01<-my_gmm.t2$coefficients)
          #
          Beta.b<-matrix(beta.01,ncol=1)
          my_gmm.t3<-gmm(moments.alpha,x=data.ob.1,t0=c(alpha.01),optfct=c("nlminb"))
          (alpha.S1<-my_gmm.t3$coefficients)
          para.test<-c(beta.01,gamma.01,alpha.S1)
          ###
          if((max(abs(para.test-para.test.0))<Eps)|K.1>Inter.num|alpha.S1<0)
            break
          gamma.00<-gamma.01
          beta.00<-beta.01
          alpha.01<-alpha.S1
          K.1<-K.1+1
          para.test.0<-para.test
          print(para.test)
        }
        gamma.t.01<-gamma.01
        beta.t.01<-beta.01
        alpha.t.S1<-alpha.S1
        Estimation.para<-c(gamma.t.01,beta.t.01,alpha.t.S1)
        Q1<-data.matrix(data.ob.1.1[,-c(1:3)])
        theta.11<-matrix(gamma.t.01,ncol=1)
        Q1<-cbind(1,Q1)
        mu<-exp(Q1%*%theta.11)
        Prob.y<-mu/(1+mu)
        #AIC
        AIC<-2*(length(beta.t.01)+length(gamma.t.01)+length(alpha.t.S1))-2*(LL.aic.logis(beta.t.01,gamma.t.01,alpha.t.S1,data.ob.1)$LL)
        #SAIC<-2*(length(beta.t.01)+length(gamma.t.01)+length(alpha.t.S1))-2*(LL.aic.logis(beta.t.01,gamma.t.01,alpha.t.S1,data.ob.1)$LL)+sum(Prob.y*log(Prob.y))
        #========================
        #S.E. by bootstrapping
        beta.est.1.v<-c();gamma.est.1.v<-c()
        alpha.est.1.v<-c()
        
        for(boot in 1:BS){
          set.seed(boot)
          tryCatch({
            N.boot.a<-sample(1:(dim(data.ob.1.1)[1]),replace=T)
            data.ob.2<-data.ob.1.1[N.boot.a,]
            data.ob.2.1<-data.ob.2
            Lambda.1<-initial_Lambda.1(Time=data.ob.2.1$Surv.time,Status=data.ob.2.1$status,
                                       id=c(1:dim(data.ob.2.1)[1]),
                                       X=data.ob.2.1[,-c((1:3))],Z=data.ob.2.1[,-(1:3)],
                                       corstr="independence")
            Lambda1<-Lambda.1$Lambda
            alpha.01<-c(-sum(data.ob.2.1$status)/sum(data.ob.2.1$status*log(data.ob.2.1$Surv.time)*(data.ob.2.1$status-Lambda1)))
            #
            U.logit.1<-rbinom(length(data.ob.2.1$cured),1,c(data.ob.2.1$cured))
            lambda.m<-cv.glmnet(data.matrix(data.ob.2.1[,-c(1:3)]),U.logit.1,family=binomial,standardize = FALSE)
            (gamma.00<-coef(lambda.m,s=lambda.m$lambda.min)[1:(dim(data.ob.2.1[,-c(1:3)])[2]+1)])
            defult.lambda<-lambda.m$lambda.min
            
            #bebias
            Z.t.1<-data.matrix(cbind(1,data.ob.2.1[,-c(1:3)]))
            gamma.tt<-matrix(gamma.00,ncol=1)
            #first derivating
            pi<-exp(Z.t.1%*%gamma.tt)/(1+exp(Z.t.1%*%gamma.tt))
            pi.first<-sapply(1:(dim(Z.t.1)[1]),function(i){Z.t.1[i,]*(data.ob.2.1$cured[i]-pi[i])})
            pi.first.1<-matrix(apply(pi.first,1,sum),ncol=1)
            #second derivating
            pi.sec<-0
            for(i in 1:dim(Z.t.1)[1]){
              pi.sec.t<-(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
              pi.sec<-pi.sec+pi.sec.t}
              pi.sec.1<-(-pi.sec)/(dim(Z.t.1)[1])
              pi.sec.1.inv<-solve(pi.sec.1)
              gamma.1.debias<-gamma.tt-(pi.sec.1.inv%*%(pi.first.1))/(dim(Z.t.1)[1])
              gamma.00<-c(gamma.1.debias)
            #####################################
            #
            my_gmm.2<-gmm(moments.G1,x=data.ob.2.1,t0=rep(0,dim(data.ob.2.1[,-c((1:3))])[2]+1),type="iterative",
                          wmatrix = "ident",method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
            (beta.00<-my_gmm.2$coefficients)
            #
            K.1<-0
            para.test.0<-c(beta.00,gamma.00,alpha.01)
            while(1){
              gamma.1<-matrix(gamma.00,ncol=1)
              beta.1<-matrix(beta.00,ncol=1)
              X.t.1<-cbind(1,data.ob.2.1[,-c((1:3))])
              Z.t.1<-cbind(1,data.ob.2.1[,-(1:3)])
              X.t.1<-as.matrix(X.t.1)
              Z.t.1<-as.matrix(Z.t.1)
              S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.2.1$Surv.time^alpha.01))
              pi<-exp(Z.t.1%*%gamma.1)/(1+exp(Z.t.1%*%gamma.1))
              Wi<-data.ob.2.1$status+((1-data.ob.2.1$status)*pi*(S3)/(((1-pi)*(1))+(pi*S3)))
              data.ob.2.1$cured<-Wi
              #
              model.lasso<-glmnet(data.matrix(data.ob.2.1[,-c(1:3)]),data.ob.2.1$cured,family=binomial,standardize = FALSE,lambda=defult.lambda)
              gamma.01<-coef(model.lasso)[1:(dim(data.ob.2.1[,-c(1:3)])[2]+1)]
              #bebias
              Z.t.1<-data.matrix(cbind(1,data.ob.2.1[,-c(1:3)]))
              gamma.tt<-matrix(gamma.01,ncol=1)
              #first derivating
              pi<-exp(Z.t.1%*%gamma.tt)/(1+exp(Z.t.1%*%gamma.tt))
              pi.first<-sapply(1:(dim(Z.t.1)[1]),function(i){Z.t.1[i,]*(data.ob.2.1$cured[i]-pi[i])})
              pi.first.1<-matrix(apply(pi.first,1,sum),ncol=1)
              #second derivating
              pi.sec<-0
              for(i in 1:dim(Z.t.1)[1]){
                pi.sec.t<-(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
                pi.sec<-pi.sec+pi.sec.t}
              pi.sec.1<-(-pi.sec)/(dim(Z.t.1)[1])
              pi.sec.1.inv<-solve(pi.sec.1)
              gamma.1.debias<-gamma.tt-(pi.sec.1.inv%*%(pi.first.1))/(dim(Z.t.1)[1])
              gamma.01<-c(gamma.1.debias)
              #
              #Cox
              my_gmm.t2<-gmm(moments.G1,x=data.ob.2.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                             method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
              
              (beta.01<-my_gmm.t2$coefficients)
              Beta.b<-matrix(beta.01,ncol=1)
              my_gmm.t3<-gmm(moments.alpha,x=data.ob.2.1,t0=c(alpha.01),optfct=c("nlminb"))
              alpha.S1<-my_gmm.t3$coefficients
              para.test<-c(beta.01,gamma.01,alpha.S1)
              ###
              if((max(abs(para.test-para.test.0))<Eps)|K.1>Inter.num|alpha.S1<0)
                break
              gamma.00<-gamma.01
              beta.00<-beta.01
              alpha.01<-alpha.S1
              K.1<-K.1+1
              para.test.0<-para.test
              print(para.test)
            }},error=function(e){})
          
          gamma.est.1.v<-rbind(gamma.est.1.v,gamma.01)
          beta.est.1.v<-rbind(beta.est.1.v,beta.01)
          alpha.est.1.v<-c(alpha.est.1.v,alpha.S1)
        }
        gamma.est.V<-sqrt(apply(gamma.est.1.v,2,var))
        beta.est.V<-sqrt(apply(beta.est.1.v,2,var))
        alpha.es.V<-sqrt(var(alpha.est.1.v))
        Standard.Error.para<-c(gamma.est.V,beta.est.V,alpha.es.V)
        Z.score=Estimation.para/Standard.Error.para
        P.value<-2*(1-pnorm(abs(Z.score)))
        CI.l<-Estimation.para+qnorm(0.025)*Standard.Error.para
        CI.u<-Estimation.para+qnorm(0.975)*Standard.Error.para
        CI<-paste0("(",round(CI.l,3),",",round(CI.u,3),")")
        G.para<-paste0(Variable,paste0(".gamma",c(0:length(gamma.est.V))))
        B.para<-paste0(Variable,paste0(".beta",c(0:length(beta.est.V))))
        a.para<-c("alpha")
        para.name<-c(G.para,B.para,a.para)
        #
        result.R<-cbind(para.name,round(Estimation.para,3),round(Standard.Error.para,3),round(Z.score,3),round(P.value,3),CI)
        colnames(result.R)<-c("Covariates","Estimation","S.E","Z","P value","C.I. of 95%")
        #plot
        result.plot<-cbind(data.ob.demo.ID,data.ob.1.1[,-c(1:3)],round(Prob.y,3))
      }else{
        #RF
        #==========================================
        #
        moments.G1<-function(theta,data){
          alpha.u1<-alpha.01
          y<-matrix(data[,1],ncol=1)
          x<-data.matrix(data[,-c(1:3)])
          Wi<-matrix(data[,3],ncol=1)
          theta.1<-matrix(theta,ncol=1)
          status<-data[,2]
          G<-matrix(0,ncol=1,nrow=dim(data)[1])
          q.1<-cbind(1,x)
          mu<-q.1%*%theta.1
          G<-c(status-(exp(mu)*(y)^(alpha.u1)))
          G.1<-c(Wi)*c(G)
          G.2<-c(G.1)*q.1
          return(G.2)
        }
        moments.alpha<-function(theta,data){
          y<-matrix(data[,1],ncol=1)
          x<-data.matrix(data[,-c(1:3)])
          Wi<-matrix(data[,3],ncol=1)
          theta.1<-matrix(theta,ncol=1)
          status<-data[,2]
          q.1<-cbind(1,x)
          G.A<-(log(y)*(Wi*status-Wi*(y^(theta))*exp(q.1%*%Beta.b))+status/theta)
          return(G.A)
        }
        Lambda.1<-initial_Lambda.1(Time=data.ob.1$Surv.time,Status=data.ob.1$status,
                                   id=c(1:dim(data.ob.1)[1]),
                                   X=data.ob.1[,-(1:3)],Z=data.ob.1[,-(1:3)],
                                   corstr="independence")
        Lambda1<-Lambda.1$Lambda
        alpha.01<-c(-sum(data.ob.1$status)/sum(data.ob.1$status*log(data.ob.1$Surv.time)*(data.ob.1$status-Lambda1)))
        
        my_gmm.2<-gmm(moments.G1,x=data.ob.1,t0=rep(0,dim(data.ob.1[,-c((1:3))])[2]+1),type="iterative",
                      method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
        beta.00<-my_gmm.2$coefficients
        #======================================
        RF_model<-randomForest(factor(cured)~.,data = data.ob.1[,-c(1:2)])
        RF_model.p<-predict(RF_model,(data.ob.1[,-c(1:2)]),type="prob")
        pi.rf.0<-RF_model.p[,2]
        RF.platt<-probability.calibration(data.ob.1$cured,pi.rf.0,regularization=T)
        pi.rf.0<-RF.platt
        #
        K.1<-0
        para.test.0<-c(beta.00,pi.rf.0,alpha.01)
        while(1){
          beta.1<-matrix(beta.00,ncol=1)
          X.t.1<-cbind(1,data.ob.1[,-(1:3)])
          X.t.1<-as.matrix(X.t.1)
          S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.1$Surv.time^alpha.01))
          pi<-pi.rf.0
          Wi<-data.ob.1$status+((1-data.ob.1$status)*pi*(S3)/(((1-pi)*(1))+(pi*S3)))
          data.ob.1$cured<-Wi
          #
          #Rf
          RF.platt.1.1<-c()
          for(rf in 1:5){
            U.RF<-c()
            for(S.1 in 1:(dim(data.ob.1)[1])){U.RF<-c(U.RF,rbinom(1,1,c(data.ob.1$cured)[S.1]))}
            data.ob.1$U.RF<-factor(U.RF)
            RF_model.1<-randomForest(factor(U.RF)~.,data = data.ob.1[,-c(1:3)],ntree=100)
            RF_model.p<-predict(RF_model.1,data.ob.1[,-c(1:3)], type="prob")
            RF.platt<-probability.calibration(factor(U.RF),RF_model.p[,2],regularization=T)
            RF.platt.1.1<-rbind(RF.platt.1.1,RF.platt)
          }
          pi.z.1<-c(apply(RF.platt.1.1,2,mean))
          #Cox
          data.ob.1<-data.ob.1[,-(dim(data.ob.1)[2])]
          my_gmm.t2<-gmm(moments.G1,x=data.ob.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                         method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
          
          (beta.01<-my_gmm.t2$coefficients)
          #
          Beta.b<-matrix(beta.01,ncol=1)
          my_gmm.t3<-gmm(moments.alpha,x=data.ob.1,t0=c(alpha.01),optfct=c("nlminb"))
          (alpha.S1<-my_gmm.t3$coefficients)
          para.test<-c(beta.01,pi.z.1,alpha.S1)
          ###
          if(((max(abs(para.test-para.test.0)[1:length(beta.01)])<Eps)&
              (max(abs(para.test-para.test.0)[(length(beta.01)+1):(length(beta.01)+length(pi.z.1))])<Eps))|K.1>Inter.num)
            break
          #
          pi.rf.0<-pi.z.1
          beta.00<-beta.01
          alpha.01<-alpha.S1
          K.1<-K.1+1
          para.test.0<-para.test
          print(K.1)
        }
        pi.z.rf.1<-pi.z.1
        beta.rf.01<-beta.01
        alpha.rf.01<-alpha.01
        Estimation.para<-c(beta.rf.01,alpha.rf.01)
        Prob.y<-pi.z.rf.1
        AIC<-2*(length(beta.rf.01)+length(beta.rf.01)+length(alpha.rf.01))-2*(LL.aic.rf(beta.rf.01,pi.z.rf.1,alpha.rf.01,data.ob.1)$LL)
        #SAIC<-2*(length(beta.rf.01)+length(beta.rf.01)+length(alpha.rf.01))-2*(LL.aic.rf(beta.rf.01,pi.z.rf.1,alpha.rf.01,data.ob.1)$LL)+sum(Prob.y*log(Prob.y))
        #=================================================
        ##S.E. by bootstrapping
        beta.est.1.v<-c();pi.rf.est.1.v<-c()
        alpha.est.1.v<-c()
        for(boot in 1:BS){
          set.seed(boot)
          print(boot)
          tryCatch({
            N.boot.a<-sample(1:(dim(data.ob.1.1)[1]),replace=T)
            data.ob.2<-data.ob.1.1[N.boot.a,]
            data.ob.2.1<-data.ob.2
            Lambda.1<-initial_Lambda.1(Time=data.ob.2.1$Surv.time,Status=data.ob.2.1$status,
                                       id=c(1:dim(data.ob.2.1)[1]),
                                       X=data.ob.2.1[,-c((1:3))],Z=data.ob.2.1[,-(1:3)],
                                       corstr="independence")
            Lambda1<-Lambda.1$Lambda
            
            (alpha.01<-c(-sum(data.ob.2.1$status)/sum(data.ob.2.1$status*log(data.ob.2.1$Surv.time)*(data.ob.2.1$status-Lambda1))))
            #
            #
            RF_model<-randomForest(factor(cured)~.,data = data.ob.2.1[,-c(1:2)])
            RF_model.p<-predict(RF_model,(data.ob.2.1[,-c(1:2)]),type="prob")
            pi.rf.0<-RF_model.p[,2]
            RF.platt<-probability.calibration(data.ob.2.1$cured,pi.rf.0,regularization=T)
            pi.rf.0<-RF.platt
            #
            my_gmm.2<-gmm(moments.G1,x=data.ob.2.1,t0=rep(0,dim(data.ob.2.1[,-c((1:3))])[2]+1),type="iterative",
                          wmatrix = "ident",method = "Nelder-Mead",control = list(reltol = 1e-20,maxit=20000))
            (beta.00<-my_gmm.2$coefficients)
            #
            K.1<-0
            para.test.0<-c(beta.00,pi.rf.0,alpha.01)
            while(1){
              beta.1<-matrix(beta.00,ncol=1)
              X.t.1<-cbind(1,data.ob.2.1[,-c((1:3))])
              X.t.1<-as.matrix(X.t.1)
              S3<-exp(-exp(X.t.1%*%beta.1)*(data.ob.2.1$Surv.time^alpha.01))
              pi<-pi.rf.0
              SC<-1
              Wi<-data.ob.2.1$status+((1-data.ob.2.1$status)*pi*(S3)/(((1-pi)*(SC))+(pi*S3)))
              data.ob.2.1$cured<-Wi
              #
              #Rf
              RF.platt.1.1<-c()
              for(rf in 1:5){
                U.RF<-c()
                for(S.1 in 1:(dim(data.ob.2.1)[1])){U.RF<-c(U.RF,rbinom(1,1,c(data.ob.2.1$cured)[S.1]))}
                data.ob.2.1$U.RF<-factor(U.RF)
                RF_model.1<-randomForest(factor(U.RF)~.,data = data.ob.2.1[,-c(1:3)],ntree=100)
                RF_model.p<-predict(RF_model.1,data.ob.2.1[,-c(1:3)], type="prob")
                RF.platt<-probability.calibration(factor(U.RF),RF_model.p[,2],regularization=T)
                #RF.platt.1.1<-rbind(RF.platt.1.1,RF_model.p[,2])
                RF.platt.1.1<-rbind(RF.platt.1.1,RF.platt)
              }
              pi.z.1<-c(apply(RF.platt.1.1,2,mean))
              
              #Cox
              data.ob.2.1<-data.ob.2.1[,-(dim(data.ob.2.1)[2])]
              my_gmm.t2<-gmm(moments.G1,x=data.ob.2.1,t0=beta.00,type="iterative",wmatrix = "optimal",
                             method = "Nelder-Mead", control = list(reltol = 1e-25, maxit=20000))
              
              (beta.01<-my_gmm.t2$coefficients)
              Beta.b<-matrix(beta.01,ncol=1)
              my_gmm.t3<-gmm(moments.alpha,x=data.ob.2.1,t0=c(alpha.01),optfct=c("nlminb"))
              (alpha.S1<-my_gmm.t3$coefficients)
              para.test<-c(beta.01,pi.z.1,alpha.S1)
              ###
              if(((max(abs(para.test-para.test.0)[1:length(beta.01)])<Eps)&
                  (max(abs(para.test-para.test.0)[(length(beta.01)+1):(length(beta.01)+length(pi.z.1))])<Eps))|K.1>Inter.num)
                break
              #gamma.00<-gamma.01
              pi.rf.0<-pi.z.1
              beta.00<-beta.01
              alpha.01<-alpha.S1
              K.1<-K.1+1
              para.test.0<-para.test
              print(K.1)
            }
          }
          ,error=function(e){})
          #
          pi.rf.est.1.v<-rbind(pi.rf.est.1.v,pi.z.1)
          beta.est.1.v<-rbind(beta.est.1.v,beta.01)
          alpha.est.1.v<-c(alpha.est.1.v,alpha.S1)
        }
        beta.est.V<-sqrt(apply(beta.est.1.v,2,var))
        alpha.es.V<-sqrt(var(alpha.est.1.v))
        Standard.Error.para<-c(beta.est.V,alpha.es.V)
        Z.score=Estimation.para/Standard.Error.para
        P.value<-2*(1-pnorm(abs(Z.score)))
        CI.l<-Estimation.para+qnorm(0.025)*Standard.Error.para
        CI.u<-Estimation.para+qnorm(0.975)*Standard.Error.para
        CI<-paste0("(",round(CI.l,3),",",round(CI.u,3),")")
        B.para<-paste0(Variable,paste0(".beta",c(0:length(beta.est.V))))
        a.para<-c("alpha")
        para.name<-c(B.para,a.para)
        #
        result.R<-cbind(para.name,round(Estimation.para,3),round(Standard.Error.para,3),round(Z.score,3),round(P.value,3),CI)
        colnames(result.R)<-c("Covariates","Estimation","S.E","Z","P value","C.I. of 95%")
        #plot
        result.plot<-cbind(data.ob.demo.ID,data.ob.1.1[,-c(1:3)],Prob.y)
      }
      
      }
    return(list(Result.model=result.R,AIC=AIC,Prob=round(result.plot,3)))
  })
  
  output$Result1<-renderTable({
    analysis.result()[[1]]
  })
  
  output$XY<-renderPrint({
    analysis.result()[[2]]
  })
  output$result2<-renderDataTable({
    analysis.result()[[3]]
  })
  #Download
  output$downloadData.1<-downloadHandler(
    filename = function(){
      paste(input$file,".csv", sep = "")
    },
    content = function(file) {
      write.csv(analysis.result()[[3]],file,row.names = FALSE)
    }
  )
}

shinyApp(ui, server)

